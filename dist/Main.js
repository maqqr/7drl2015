// Generated by psc version 0.6.4
var PS = PS || {};
PS.Prelude = (function () {
    "use strict";
    
    function cons(e) {
      return function(l) {
        return [e].concat(l);
      };
    }
    ;
    
    function showNumberImpl(n) {
      return n.toString();
    }
    ;
    
    function numAdd(n1) {
      return function(n2) {
        return n1 + n2;
      };
    }
    ;
    
    function numSub(n1) {
      return function(n2) {
        return n1 - n2;
      };
    }
    ;
    
    function numMul(n1) {
      return function(n2) {
        return n1 * n2;
      };
    }
    ;
    
    function numDiv(n1) {
      return function(n2) {
        return n1 / n2;
      };
    }
    ;
    
    function numMod(n1) {
      return function(n2) {
        return n1 % n2;
      };
    }
    ;
    
    function numNegate(n) {
      return -n;
    }
    ;
    
    function refEq(r1) {
      return function(r2) {
        return r1 === r2;
      };
    }
    ;
    
    function refIneq(r1) {
      return function(r2) {
        return r1 !== r2;
      };
    }
    ;
    
    function unsafeCompareImpl(lt) {
      return function(eq) {
        return function(gt) {
          return function(x) {
            return function(y) {
              return x < y ? lt : x > y ? gt : eq;
            };
          };
        };
      };
    }
    ;
    
    function boolAnd(b1) {
      return function(b2) {
        return b1 && b2;
      };
    }
    ;
    
    function boolOr(b1) {
      return function(b2) {
        return b1 || b2;
      };
    }
    ;
    
    function boolNot(b) {
      return !b;
    }
    ;
    var LT = (function () {
        function LT() {

        };
        LT.value = new LT();
        return LT;
    })();
    var GT = (function () {
        function GT() {

        };
        GT.value = new GT();
        return GT;
    })();
    var EQ = (function () {
        function EQ() {

        };
        EQ.value = new EQ();
        return EQ;
    })();
    var Show = function (show) {
        this.show = show;
    };
    var Functor = function ($less$dollar$greater) {
        this["<$>"] = $less$dollar$greater;
    };
    var Apply = function ($less$times$greater, __superclass_Prelude$dotFunctor_0) {
        this["<*>"] = $less$times$greater;
        this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
    };
    var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
        this.pure = pure;
    };
    var Bind = function ($greater$greater$eq, __superclass_Prelude$dotApply_0) {
        this[">>="] = $greater$greater$eq;
        this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
    };
    var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
        this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
        this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
    };
    var Num = function ($percent, $times, $plus, $minus, $div, negate) {
        this["%"] = $percent;
        this["*"] = $times;
        this["+"] = $plus;
        this["-"] = $minus;
        this["/"] = $div;
        this.negate = negate;
    };
    var Eq = function ($div$eq, $eq$eq) {
        this["/="] = $div$eq;
        this["=="] = $eq$eq;
    };
    var Ord = function (__superclass_Prelude$dotEq_0, compare) {
        this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
        this.compare = compare;
    };
    var BoolLike = function ($amp$amp, not, $bar$bar) {
        this["&&"] = $amp$amp;
        this.not = not;
        this["||"] = $bar$bar;
    };
    var $greater$greater$eq = function (dict) {
        return dict[">>="];
    };
    var $eq$eq = function (dict) {
        return dict["=="];
    };
    var $less$greater = function (dict) {
        return dict["<>"];
    };
    var $less$times$greater = function (dict) {
        return dict["<*>"];
    };
    var $colon = cons;
    var $plus = function (dict) {
        return dict["+"];
    };
    var $amp$amp = function (dict) {
        return dict["&&"];
    };
    var $dollar = function (f) {
        return function (x) {
            return f(x);
        };
    };
    var unsafeCompare = unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
    var showNumber = new Show(showNumberImpl);
    var show = function (dict) {
        return dict.show;
    };
    var pure = function (dict) {
        return dict.pure;
    };
    var $$return = function (__dict_Monad_5) {
        return pure(__dict_Monad_5["__superclass_Prelude.Applicative_0"]());
    };
    var numNumber = new Num(numMod, numMul, numAdd, numSub, numDiv, numNegate);
    var not = function (dict) {
        return dict.not;
    };
    var negate = function (dict) {
        return dict.negate;
    };
    var liftA1 = function (__dict_Applicative_7) {
        return function (f) {
            return function (a) {
                return $less$times$greater(__dict_Applicative_7["__superclass_Prelude.Apply_0"]())(pure(__dict_Applicative_7)(f))(a);
            };
        };
    };
    var eqString = new Eq(refIneq, refEq);
    var ordString = new Ord(function () {
        return eqString;
    }, unsafeCompare);
    var eqNumber = new Eq(refIneq, refEq);
    var ordNumber = new Ord(function () {
        return eqNumber;
    }, unsafeCompare);
    var compare = function (dict) {
        return dict.compare;
    };
    var $less = function (__dict_Ord_11) {
        return function (a1) {
            return function (a2) {
                var _304 = compare(__dict_Ord_11)(a1)(a2);
                if (_304 instanceof LT) {
                    return true;
                };
                return false;
            };
        };
    };
    var $less$eq = function (__dict_Ord_12) {
        return function (a1) {
            return function (a2) {
                var _305 = compare(__dict_Ord_12)(a1)(a2);
                if (_305 instanceof GT) {
                    return false;
                };
                return true;
            };
        };
    };
    var $greater = function (__dict_Ord_13) {
        return function (a1) {
            return function (a2) {
                var _306 = compare(__dict_Ord_13)(a1)(a2);
                if (_306 instanceof GT) {
                    return true;
                };
                return false;
            };
        };
    };
    var boolLikeBoolean = new BoolLike(boolAnd, boolNot, boolOr);
    var ap = function (__dict_Monad_15) {
        return function (f) {
            return function (a) {
                return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(f)(function (_2) {
                    return $greater$greater$eq(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(a)(function (_1) {
                        return $$return(__dict_Monad_15)(_2(_1));
                    });
                });
            };
        };
    };
    return {
        LT: LT, 
        GT: GT, 
        EQ: EQ, 
        BoolLike: BoolLike, 
        Ord: Ord, 
        Eq: Eq, 
        Num: Num, 
        Monad: Monad, 
        Bind: Bind, 
        Applicative: Applicative, 
        Apply: Apply, 
        Functor: Functor, 
        Show: Show, 
        "<>": $less$greater, 
        not: not, 
        "&&": $amp$amp, 
        "<=": $less$eq, 
        ">": $greater, 
        "<": $less, 
        compare: compare, 
        refIneq: refIneq, 
        refEq: refEq, 
        "==": $eq$eq, 
        negate: negate, 
        "+": $plus, 
        ap: ap, 
        "return": $$return, 
        ">>=": $greater$greater$eq, 
        liftA1: liftA1, 
        pure: pure, 
        "<*>": $less$times$greater, 
        show: show, 
        cons: cons, 
        ":": $colon, 
        "$": $dollar, 
        showNumber: showNumber, 
        numNumber: numNumber, 
        eqString: eqString, 
        eqNumber: eqNumber, 
        ordNumber: ordNumber, 
        ordString: ordString, 
        boolLikeBoolean: boolLikeBoolean
    };
})();
var PS = PS || {};
PS.Data_Char = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function fromCharCode(c) {
      return String.fromCharCode(c);
    }
    ;
    var Char = function (x) {
        return x;
    };
    var eqChar = new Prelude.Eq(function (a) {
        return function (b) {
            return !Prelude["=="](eqChar)(a)(b);
        };
    }, function (_30) {
        return function (_31) {
            return _30 === _31;
        };
    });
    var ordChar = new Prelude.Ord(function () {
        return eqChar;
    }, function (_32) {
        return function (_33) {
            return Prelude.compare(Prelude.ordString)(_32)(_33);
        };
    });
    return {
        fromCharCode: fromCharCode, 
        eqChar: eqChar, 
        ordChar: ordChar
    };
})();
var PS = PS || {};
PS.Data_String_Unsafe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Char = PS.Data_Char;
    
    function charAt(i) {
      return function(s) {
        return s.charAt(i);
      };
    }
    ;
    return {
        charAt: charAt
    };
})();
var PS = PS || {};
PS.Control_Monad_Eff = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    
    function returnE(a) {
      return function() {
        return a;
      };
    }
    ;
    
    function bindE(a) {
      return function(f) {
        return function() {
          return f(a())();
        };
      };
    }
    ;
    var monadEff = new Prelude.Monad(function () {
        return applicativeEff;
    }, function () {
        return bindEff;
    });
    var bindEff = new Prelude.Bind(bindE, function () {
        return applyEff;
    });
    var applyEff = new Prelude.Apply(Prelude.ap(monadEff), function () {
        return functorEff;
    });
    var applicativeEff = new Prelude.Applicative(function () {
        return applyEff;
    }, returnE);
    var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
    return {
        bindE: bindE, 
        returnE: returnE, 
        functorEff: functorEff, 
        applyEff: applyEff, 
        applicativeEff: applicativeEff, 
        bindEff: bindEff, 
        monadEff: monadEff
    };
})();
var PS = PS || {};
PS.Debug_Trace = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function trace(s) {
      return function() {
        console.log(s);
        return {};
      };
    }
    ;
    return {
        trace: trace
    };
})();
var PS = PS || {};
PS.Data_Maybe = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Control_Alt = PS.Control_Alt;
    var Control_Alternative = PS.Control_Alternative;
    var Control_Extend = PS.Control_Extend;
    var Control_MonadPlus = PS.Control_MonadPlus;
    var Control_Plus = PS.Control_Plus;
    var Nothing = (function () {
        function Nothing() {

        };
        Nothing.value = new Nothing();
        return Nothing;
    })();
    var Just = (function () {
        function Just(value0) {
            this.value0 = value0;
        };
        Just.create = function (value0) {
            return new Just(value0);
        };
        return Just;
    })();
    return {
        Nothing: Nothing, 
        Just: Just
    };
})();
var PS = PS || {};
PS.Control_Monad_JQuery = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foreign = PS.Data_Foreign;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var DOM = PS.DOM;
    
  function ready(func) {
    return function () {
      jQuery(document).ready(func);
    };
  }
  ;
    return {
        ready: ready
    };
})();
var PS = PS || {};
PS.Graphics_CanvasConsole = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foreign = PS.Data_Foreign;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    
    function withConsole (w) {
        return function (h) {
            return function (initialState) {
                return function (callbacks) {
                    return function () {
                        return new Console(w, h, initialState, callbacks);
                    }
                }
            }
        }
    }
    ;
    
    function clear(con) {
        return function () {
            con.clear();
        }
    }
    ;
    
    function drawChar(con) {
        return function (ch) {
            return function(col) {
                return function (x) {
                    return function (y) {
                        return function() {
                            con.drawChar(ch, col, x, y);
                        }
                    }
                }
            }
        }
    }
    ;
    
    function drawString(con) {
        return function (txt) {
            return function(col) {
                return function (x) {
                    return function (y) {
                        return function() {
                            con.drawString(txt, col, x, y);
                        }
                    }
                }
            }
        }
    }
    ;
    return {
        drawString: drawString, 
        drawChar: drawChar, 
        clear: clear, 
        withConsole: withConsole
    };
})();
var PS = PS || {};
PS.Data_Monoid = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var mempty = function (dict) {
        return dict.mempty;
    };
    return {
        mempty: mempty
    };
})();
var PS = PS || {};
PS.Data_Tuple = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Monoid = PS.Data_Monoid;
    var Control_Lazy = PS.Control_Lazy;
    var Data_Array = PS.Data_Array;
    var Control_Comonad = PS.Control_Comonad;
    var Control_Extend = PS.Control_Extend;
    var Tuple = (function () {
        function Tuple(value0, value1) {
            this.value0 = value0;
            this.value1 = value1;
        };
        Tuple.create = function (value0) {
            return function (value1) {
                return new Tuple(value0, value1);
            };
        };
        return Tuple;
    })();
    return {
        Tuple: Tuple
    };
})();
var PS = PS || {};
PS.Data_Foldable = (function () {
    "use strict";
    var Data_Monoid = PS.Data_Monoid;
    var Prelude = PS.Prelude;
    var Control_Apply = PS.Control_Apply;
    var Data_Monoid_First = PS.Data_Monoid_First;
    var Data_Either = PS.Data_Either;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    
  function foldrArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = xs.length - 1; i >= 0; --i) {
          acc = f(xs[i])(acc);
        }
        return acc;
      }
    }
  };
    
  function foldlArray(f) {
    return function(z) {
      return function(xs) {
        var acc = z;
        for (var i = 0, len = xs.length; i < len; ++i) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      }
    }
  };
    var Foldable = function (foldMap, foldl, foldr) {
        this.foldMap = foldMap;
        this.foldl = foldl;
        this.foldr = foldr;
    };
    var foldr = function (dict) {
        return dict.foldr;
    };
    var foldl = function (dict) {
        return dict.foldl;
    };
    var foldableArray = new Foldable(function (__dict_Monoid_113) {
        return function (f) {
            return function (xs) {
                return foldr(foldableArray)(function (x) {
                    return function (acc) {
                        return Prelude["<>"](__dict_Monoid_113["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                    };
                })(Data_Monoid.mempty(__dict_Monoid_113))(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldlArray(f)(z)(xs);
            };
        };
    }, function (f) {
        return function (z) {
            return function (xs) {
                return foldrArray(f)(z)(xs);
            };
        };
    });
    return {
        Foldable: Foldable, 
        foldlArray: foldlArray, 
        foldrArray: foldrArray, 
        foldl: foldl, 
        foldr: foldr, 
        foldableArray: foldableArray
    };
})();
var PS = PS || {};
PS.Data_Map = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Data_Foldable = PS.Data_Foldable;
    var Data_Tuple = PS.Data_Tuple;
    var Data_Traversable = PS.Data_Traversable;
    var Data_Array = PS.Data_Array;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Monoid = PS.Data_Monoid;
    var Leaf = (function () {
        function Leaf() {

        };
        Leaf.value = new Leaf();
        return Leaf;
    })();
    var Two = (function () {
        function Two(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        Two.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new Two(value0, value1, value2, value3);
                    };
                };
            };
        };
        return Two;
    })();
    var Three = (function () {
        function Three(value0, value1, value2, value3, value4, value5, value6) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
            this.value6 = value6;
        };
        Three.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return function (value6) {
                                    return new Three(value0, value1, value2, value3, value4, value5, value6);
                                };
                            };
                        };
                    };
                };
            };
        };
        return Three;
    })();
    var TwoLeft = (function () {
        function TwoLeft(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        TwoLeft.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new TwoLeft(value0, value1, value2);
                };
            };
        };
        return TwoLeft;
    })();
    var TwoRight = (function () {
        function TwoRight(value0, value1, value2) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
        };
        TwoRight.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return new TwoRight(value0, value1, value2);
                };
            };
        };
        return TwoRight;
    })();
    var ThreeLeft = (function () {
        function ThreeLeft(value0, value1, value2, value3, value4, value5) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
        };
        ThreeLeft.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                            };
                        };
                    };
                };
            };
        };
        return ThreeLeft;
    })();
    var ThreeMiddle = (function () {
        function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
        };
        ThreeMiddle.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                            };
                        };
                    };
                };
            };
        };
        return ThreeMiddle;
    })();
    var ThreeRight = (function () {
        function ThreeRight(value0, value1, value2, value3, value4, value5) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
            this.value4 = value4;
            this.value5 = value5;
        };
        ThreeRight.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return function (value4) {
                            return function (value5) {
                                return new ThreeRight(value0, value1, value2, value3, value4, value5);
                            };
                        };
                    };
                };
            };
        };
        return ThreeRight;
    })();
    var KickUp = (function () {
        function KickUp(value0, value1, value2, value3) {
            this.value0 = value0;
            this.value1 = value1;
            this.value2 = value2;
            this.value3 = value3;
        };
        KickUp.create = function (value0) {
            return function (value1) {
                return function (value2) {
                    return function (value3) {
                        return new KickUp(value0, value1, value2, value3);
                    };
                };
            };
        };
        return KickUp;
    })();
    var lookup = function (__copy___dict_Ord_156) {
        return function (__copy__269) {
            return function (__copy__270) {
                var __dict_Ord_156 = __copy___dict_Ord_156;
                var _269 = __copy__269;
                var _270 = __copy__270;
                tco: while (true) {
                    if (_270 instanceof Leaf) {
                        return Data_Maybe.Nothing.value;
                    };
                    if (_270 instanceof Two && Prelude["=="](__dict_Ord_156["__superclass_Prelude.Eq_0"]())(_269)(_270.value1)) {
                        return new Data_Maybe.Just(_270.value2);
                    };
                    if (_270 instanceof Two && Prelude["<"](__dict_Ord_156)(_269)(_270.value1)) {
                        var __tco___dict_Ord_156 = __dict_Ord_156;
                        var __tco__269 = _269;
                        var __tco__270 = _270.value0;
                        __dict_Ord_156 = __tco___dict_Ord_156;
                        _269 = __tco__269;
                        _270 = __tco__270;
                        continue tco;
                    };
                    if (_270 instanceof Two) {
                        var __tco___dict_Ord_156 = __dict_Ord_156;
                        var __tco__269 = _269;
                        var __tco__270 = _270.value3;
                        __dict_Ord_156 = __tco___dict_Ord_156;
                        _269 = __tco__269;
                        _270 = __tco__270;
                        continue tco;
                    };
                    if (_270 instanceof Three && Prelude["=="](__dict_Ord_156["__superclass_Prelude.Eq_0"]())(_269)(_270.value1)) {
                        return new Data_Maybe.Just(_270.value2);
                    };
                    if (_270 instanceof Three && Prelude["=="](__dict_Ord_156["__superclass_Prelude.Eq_0"]())(_269)(_270.value4)) {
                        return new Data_Maybe.Just(_270.value5);
                    };
                    if (_270 instanceof Three && Prelude["<"](__dict_Ord_156)(_269)(_270.value1)) {
                        var __tco___dict_Ord_156 = __dict_Ord_156;
                        var __tco__269 = _269;
                        var __tco__270 = _270.value0;
                        __dict_Ord_156 = __tco___dict_Ord_156;
                        _269 = __tco__269;
                        _270 = __tco__270;
                        continue tco;
                    };
                    if (_270 instanceof Three && (Prelude["<"](__dict_Ord_156)(_270.value1)(_269) && Prelude["<="](__dict_Ord_156)(_269)(_270.value4))) {
                        var __tco___dict_Ord_156 = __dict_Ord_156;
                        var __tco__269 = _269;
                        var __tco__270 = _270.value3;
                        __dict_Ord_156 = __tco___dict_Ord_156;
                        _269 = __tco__269;
                        _270 = __tco__270;
                        continue tco;
                    };
                    if (_270 instanceof Three) {
                        var __tco___dict_Ord_156 = __dict_Ord_156;
                        var __tco__269 = _269;
                        var __tco__270 = _270.value6;
                        __dict_Ord_156 = __tco___dict_Ord_156;
                        _269 = __tco__269;
                        _270 = __tco__270;
                        continue tco;
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var fromZipper = function (__copy___dict_Ord_158) {
        return function (__copy__271) {
            return function (__copy__272) {
                var __dict_Ord_158 = __copy___dict_Ord_158;
                var _271 = __copy__271;
                var _272 = __copy__272;
                tco: while (true) {
                    if (_271.length === 0) {
                        return _272;
                    };
                    if (_271.length >= 1) {
                        var _368 = _271.slice(1);
                        if (_271[0] instanceof TwoLeft) {
                            var __tco___dict_Ord_158 = __dict_Ord_158;
                            var __tco__272 = new Two(_272, (_271[0]).value0, (_271[0]).value1, (_271[0]).value2);
                            __dict_Ord_158 = __tco___dict_Ord_158;
                            _271 = _368;
                            _272 = __tco__272;
                            continue tco;
                        };
                    };
                    if (_271.length >= 1) {
                        var _373 = _271.slice(1);
                        if (_271[0] instanceof TwoRight) {
                            var __tco___dict_Ord_158 = __dict_Ord_158;
                            var __tco__272 = new Two((_271[0]).value0, (_271[0]).value1, (_271[0]).value2, _272);
                            __dict_Ord_158 = __tco___dict_Ord_158;
                            _271 = _373;
                            _272 = __tco__272;
                            continue tco;
                        };
                    };
                    if (_271.length >= 1) {
                        var _381 = _271.slice(1);
                        if (_271[0] instanceof ThreeLeft) {
                            var __tco___dict_Ord_158 = __dict_Ord_158;
                            var __tco__272 = new Three(_272, (_271[0]).value0, (_271[0]).value1, (_271[0]).value2, (_271[0]).value3, (_271[0]).value4, (_271[0]).value5);
                            __dict_Ord_158 = __tco___dict_Ord_158;
                            _271 = _381;
                            _272 = __tco__272;
                            continue tco;
                        };
                    };
                    if (_271.length >= 1) {
                        var _389 = _271.slice(1);
                        if (_271[0] instanceof ThreeMiddle) {
                            var __tco___dict_Ord_158 = __dict_Ord_158;
                            var __tco__272 = new Three((_271[0]).value0, (_271[0]).value1, (_271[0]).value2, _272, (_271[0]).value3, (_271[0]).value4, (_271[0]).value5);
                            __dict_Ord_158 = __tco___dict_Ord_158;
                            _271 = _389;
                            _272 = __tco__272;
                            continue tco;
                        };
                    };
                    if (_271.length >= 1) {
                        var _397 = _271.slice(1);
                        if (_271[0] instanceof ThreeRight) {
                            var __tco___dict_Ord_158 = __dict_Ord_158;
                            var __tco__272 = new Three((_271[0]).value0, (_271[0]).value1, (_271[0]).value2, (_271[0]).value3, (_271[0]).value4, (_271[0]).value5, _272);
                            __dict_Ord_158 = __tco___dict_Ord_158;
                            _271 = _397;
                            _272 = __tco__272;
                            continue tco;
                        };
                    };
                    throw new Error("Failed pattern match");
                };
            };
        };
    };
    var insert = function (__dict_Ord_159) {
        var up = function (__copy___dict_Ord_160) {
            return function (__copy__283) {
                return function (__copy__284) {
                    var __dict_Ord_160 = __copy___dict_Ord_160;
                    var _283 = __copy__283;
                    var _284 = __copy__284;
                    tco: while (true) {
                        if (_283.length === 0) {
                            return new Two(_284.value0, _284.value1, _284.value2, _284.value3);
                        };
                        if (_283.length >= 1) {
                            var _412 = _283.slice(1);
                            if (_283[0] instanceof TwoLeft) {
                                return fromZipper(__dict_Ord_160)(_412)(new Three(_284.value0, _284.value1, _284.value2, _284.value3, (_283[0]).value0, (_283[0]).value1, (_283[0]).value2));
                            };
                        };
                        if (_283.length >= 1) {
                            var _421 = _283.slice(1);
                            if (_283[0] instanceof TwoRight) {
                                return fromZipper(__dict_Ord_160)(_421)(new Three((_283[0]).value0, (_283[0]).value1, (_283[0]).value2, _284.value0, _284.value1, _284.value2, _284.value3));
                            };
                        };
                        if (_283.length >= 1) {
                            var _433 = _283.slice(1);
                            if (_283[0] instanceof ThreeLeft) {
                                var __tco___dict_Ord_160 = __dict_Ord_160;
                                var __tco__284 = new KickUp(new Two(_284.value0, _284.value1, _284.value2, _284.value3), (_283[0]).value0, (_283[0]).value1, new Two((_283[0]).value2, (_283[0]).value3, (_283[0]).value4, (_283[0]).value5));
                                __dict_Ord_160 = __tco___dict_Ord_160;
                                _283 = _433;
                                _284 = __tco__284;
                                continue tco;
                            };
                        };
                        if (_283.length >= 1) {
                            var _445 = _283.slice(1);
                            if (_283[0] instanceof ThreeMiddle) {
                                var __tco___dict_Ord_160 = __dict_Ord_160;
                                var __tco__284 = new KickUp(new Two((_283[0]).value0, (_283[0]).value1, (_283[0]).value2, _284.value0), _284.value1, _284.value2, new Two(_284.value3, (_283[0]).value3, (_283[0]).value4, (_283[0]).value5));
                                __dict_Ord_160 = __tco___dict_Ord_160;
                                _283 = _445;
                                _284 = __tco__284;
                                continue tco;
                            };
                        };
                        if (_283.length >= 1) {
                            var _457 = _283.slice(1);
                            if (_283[0] instanceof ThreeRight) {
                                var __tco___dict_Ord_160 = __dict_Ord_160;
                                var __tco__284 = new KickUp(new Two((_283[0]).value0, (_283[0]).value1, (_283[0]).value2, (_283[0]).value3), (_283[0]).value4, (_283[0]).value5, new Two(_284.value0, _284.value1, _284.value2, _284.value3));
                                __dict_Ord_160 = __tco___dict_Ord_160;
                                _283 = _457;
                                _284 = __tco__284;
                                continue tco;
                            };
                        };
                        throw new Error("Failed pattern match");
                    };
                };
            };
        };
        var down = function (__copy___dict_Ord_161) {
            return function (__copy__279) {
                return function (__copy__280) {
                    return function (__copy__281) {
                        return function (__copy__282) {
                            var __dict_Ord_161 = __copy___dict_Ord_161;
                            var _279 = __copy__279;
                            var _280 = __copy__280;
                            var _281 = __copy__281;
                            var _282 = __copy__282;
                            tco: while (true) {
                                if (_282 instanceof Leaf) {
                                    return up(__dict_Ord_161)(_279)(new KickUp(Leaf.value, _280, _281, Leaf.value));
                                };
                                if (_282 instanceof Two && Prelude["=="](__dict_Ord_161["__superclass_Prelude.Eq_0"]())(_280)(_282.value1)) {
                                    return fromZipper(__dict_Ord_161)(_279)(new Two(_282.value0, _280, _281, _282.value3));
                                };
                                if (_282 instanceof Two && Prelude["<"](__dict_Ord_161)(_280)(_282.value1)) {
                                    var __tco___dict_Ord_161 = __dict_Ord_161;
                                    var __tco__279 = Prelude[":"](new TwoLeft(_282.value1, _282.value2, _282.value3))(_279);
                                    var __tco__280 = _280;
                                    var __tco__281 = _281;
                                    var __tco__282 = _282.value0;
                                    __dict_Ord_161 = __tco___dict_Ord_161;
                                    _279 = __tco__279;
                                    _280 = __tco__280;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    continue tco;
                                };
                                if (_282 instanceof Two) {
                                    var __tco___dict_Ord_161 = __dict_Ord_161;
                                    var __tco__279 = Prelude[":"](new TwoRight(_282.value0, _282.value1, _282.value2))(_279);
                                    var __tco__280 = _280;
                                    var __tco__281 = _281;
                                    var __tco__282 = _282.value3;
                                    __dict_Ord_161 = __tco___dict_Ord_161;
                                    _279 = __tco__279;
                                    _280 = __tco__280;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    continue tco;
                                };
                                if (_282 instanceof Three && Prelude["=="](__dict_Ord_161["__superclass_Prelude.Eq_0"]())(_280)(_282.value1)) {
                                    return fromZipper(__dict_Ord_161)(_279)(new Three(_282.value0, _280, _281, _282.value3, _282.value4, _282.value5, _282.value6));
                                };
                                if (_282 instanceof Three && Prelude["=="](__dict_Ord_161["__superclass_Prelude.Eq_0"]())(_280)(_282.value4)) {
                                    return fromZipper(__dict_Ord_161)(_279)(new Three(_282.value0, _282.value1, _282.value2, _282.value3, _280, _281, _282.value6));
                                };
                                if (_282 instanceof Three && Prelude["<"](__dict_Ord_161)(_280)(_282.value1)) {
                                    var __tco___dict_Ord_161 = __dict_Ord_161;
                                    var __tco__279 = Prelude[":"](new ThreeLeft(_282.value1, _282.value2, _282.value3, _282.value4, _282.value5, _282.value6))(_279);
                                    var __tco__280 = _280;
                                    var __tco__281 = _281;
                                    var __tco__282 = _282.value0;
                                    __dict_Ord_161 = __tco___dict_Ord_161;
                                    _279 = __tco__279;
                                    _280 = __tco__280;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    continue tco;
                                };
                                if (_282 instanceof Three && (Prelude["<"](__dict_Ord_161)(_282.value1)(_280) && Prelude["<="](__dict_Ord_161)(_280)(_282.value4))) {
                                    var __tco___dict_Ord_161 = __dict_Ord_161;
                                    var __tco__279 = Prelude[":"](new ThreeMiddle(_282.value0, _282.value1, _282.value2, _282.value4, _282.value5, _282.value6))(_279);
                                    var __tco__280 = _280;
                                    var __tco__281 = _281;
                                    var __tco__282 = _282.value3;
                                    __dict_Ord_161 = __tco___dict_Ord_161;
                                    _279 = __tco__279;
                                    _280 = __tco__280;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    continue tco;
                                };
                                if (_282 instanceof Three) {
                                    var __tco___dict_Ord_161 = __dict_Ord_161;
                                    var __tco__279 = Prelude[":"](new ThreeRight(_282.value0, _282.value1, _282.value2, _282.value3, _282.value4, _282.value5))(_279);
                                    var __tco__280 = _280;
                                    var __tco__281 = _281;
                                    var __tco__282 = _282.value6;
                                    __dict_Ord_161 = __tco___dict_Ord_161;
                                    _279 = __tco__279;
                                    _280 = __tco__280;
                                    _281 = __tco__281;
                                    _282 = __tco__282;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match");
                            };
                        };
                    };
                };
            };
        };
        return down(__dict_Ord_159)([  ]);
    };
    var empty = Leaf.value;
    var fromList = function (__dict_Ord_165) {
        return Data_Foldable.foldl(Data_Foldable.foldableArray)(function (m) {
            return function (_266) {
                return insert(__dict_Ord_165)(_266.value0)(_266.value1)(m);
            };
        })(empty);
    };
    return {
        fromList: fromList, 
        lookup: lookup, 
        insert: insert, 
        empty: empty
    };
})();
var PS = PS || {};
PS.Main = (function () {
    "use strict";
    var Prelude = PS.Prelude;
    var Graphics_CanvasConsole = PS.Graphics_CanvasConsole;
    var Data_String_Unsafe = PS.Data_String_Unsafe;
    var Data_Map = PS.Data_Map;
    var Data_Char = PS.Data_Char;
    var Debug_Trace = PS.Debug_Trace;
    var Control_Monad_JQuery = PS.Control_Monad_JQuery;
    var Data_String = PS.Data_String;
    var Data_Maybe = PS.Data_Maybe;
    var Data_Tuple = PS.Data_Tuple;
    var Control_Monad_Eff = PS.Control_Monad_Eff;
    var $greater$greater = function (__dict_Monad_190) {
        return function (f) {
            return function (g) {
                return Prelude[">>="](__dict_Monad_190["__superclass_Prelude.Bind_1"]())(f)(function (_) {
                    return g;
                });
            };
        };
    };
    var $div$div = Data_Tuple.Tuple.create;
    var movePlayer = function (_296) {
        return function (_297) {
            var clamp = function (_301) {
                return function (_302) {
                    return function (_303) {
                        if (_301 < _302) {
                            return _302;
                        };
                        if (_301 > _303) {
                            return _303;
                        };
                        return _301;
                    };
                };
            };
            var clampPos = function (state_1) {
                var _517 = {};
                for (var _518 in state_1) {
                    if (state_1.hasOwnProperty(_518)) {
                        _517[_518] = state_1[_518];
                    };
                };
                _517.x = clamp(state_1.x)(0)(79);
                _517.y = clamp(state_1.y)(0)(24);
                return _517;
            };
            return clampPos((function () {
                var _519 = {};
                for (var _520 in _297) {
                    if (_297.hasOwnProperty(_520)) {
                        _519[_520] = _297[_520];
                    };
                };
                _519.x = _297.x + _296.value0;
                _519.y = _297.y + _296.value1;
                return _519;
            })());
        };
    };
    var makeChar = Data_String_Unsafe.charAt(0);
    var movementkeys = Data_Map.fromList(Data_Char.ordChar)([ $div$div(makeChar("W"))($div$div(0)(-1)), $div$div(makeChar("S"))($div$div(0)(1)), $div$div(makeChar("A"))($div$div(-1)(0)), $div$div(makeChar("D"))($div$div(1)(0)) ]);
    var drawGame = function (console) {
        return function (state) {
            return function __do() {
                Graphics_CanvasConsole.clear(console)();
                Graphics_CanvasConsole.drawString(console)("Hello worlllddd")("0000FF")(2)(8)();
                Graphics_CanvasConsole.drawChar(console)("@")("FF0000")(state.x)(state.y)();
                return state;
            };
        };
    };
    var onKeyPress = function (_298) {
        return function (_299) {
            return function (_300) {
                var _526 = Data_Map.lookup(Data_Char.ordChar)(Data_Char.fromCharCode(_300))(movementkeys);
                if (_526 instanceof Data_Maybe.Just) {
                    return drawGame(_298)(movePlayer(_526.value0)(_299));
                };
                if (_526 instanceof Data_Maybe.Nothing) {
                    return Prelude["return"](Control_Monad_Eff.monadEff)(_299);
                };
                throw new Error("Failed pattern match");
            };
        };
    };
    var main = Control_Monad_JQuery.ready(Graphics_CanvasConsole.withConsole(80)(25)({
        x: 3, 
        y: 3
    })({
        onKeyPress: onKeyPress
    }));
    return {
        main: main, 
        onKeyPress: onKeyPress, 
        movementkeys: movementkeys, 
        makeChar: makeChar, 
        movePlayer: movePlayer, 
        drawGame: drawGame, 
        "//": $div$div, 
        ">>": $greater$greater
    };
})();
PS.Main.main();
